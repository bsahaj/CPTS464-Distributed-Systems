/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* AccidentPublisher.java

A publication of data of type Accident

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language java -example <arch> .idl

Example publication of type Accident automatically generated by 
'rtiddsgen' To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription on the same domain used for RTI Connext with the command
java AccidentSubscriber <domain_id> <sample_count>

(3) Start the publication on the same domain used for RTI Connext with the command
java AccidentPublisher <domain_id> <sample_count>

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS.  

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.

Example:

To run the example application on domain <domain_id>:

Ensure that $(NDDSHOME)/lib/<arch> is on the dynamic library path for
Java.                       

On Unix: 
add $(NDDSHOME)/lib/<arch> to the 'LD_LIBRARY_PATH' environment
variable

On Windows:
add %NDDSHOME%\lib\<arch> to the 'Path' environment variable

Run the Java applications:

java -Djava.ext.dirs=$NDDSHOME/lib/java AccidentPublisher <domain_id>

java -Djava.ext.dirs=$NDDSHOME/lib/java AccidentSubscriber <domain_id>        
*/

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Arrays;

import com.rti.dds.domain.*;
import com.rti.dds.infrastructure.*;
import com.rti.dds.publication.*;
import com.rti.dds.topic.*;
import com.rti.ndds.config.*;

import java.util.*;
import java.io.*;

// ===========================================================================

public class AccidentPublisher implements Runnable {
    // -----------------------------------------------------------------------
    // Public Methods
    // -----------------------------------------------------------------------

	public static final int domainId = 0; // domainId is always 0
	public static final int sampleCount = 0; // sampleCount is always 0
	
	public Route passedRoute;
	public Bus pasedBus;
	
    public static void main(String[] args) throws IOException {
     
    	Properties props = new Properties();
    	props.load(new FileReader("pub.properties"));
    	
    	List<Route> routeList = new ArrayList<Route>();
    	int numRoutes = Integer.parseInt(props.getProperty("numRoutes"));
    	int numVehicles = Integer.parseInt(props.getProperty("numVehicles"));
    	int numInitialBackUpVehicles = Integer.parseInt(props.getProperty("numInitialBackupVehicles"));
    	
    	int currentRouteCount = 0;
        /* --Adding routes to the list -- */
        // Adding route 1
        System.out.println("Adding route: " + props.getProperty("route1"));
        routeList.add(new Route(props.getProperty("route1")));
        routeList.get(currentRouteCount).numStops = Integer.parseInt(props.getProperty("route1numStops"));
        routeList.get(currentRouteCount).timeBetweenStops = Integer.parseInt(props.getProperty("route1TimeBetweenStops"));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route1Vehicle1"), 1));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route1Vehicle2"), 2));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route1Vehicle3"), 3));
        // routes.get(currentRouteCount).busses.add(new
        // Bus(props.getProperty("route1Vehicle4"), 0));

        // Adding route 2
        currentRouteCount += 1;
        System.out.println("Adding route: " + props.getProperty("route2"));
        routeList.add(new Route(props.getProperty("route2")));
        routeList.add(new Route(props.getProperty("route2numStops")));
        routeList.get(currentRouteCount).numStops = Integer.parseInt(props.getProperty("route2numStops"));
        routeList.get(currentRouteCount).timeBetweenStops = Integer.parseInt(props.getProperty("route2TimeBetweeenStop"));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route2Vehicle1"), 1));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route2Vehicle2"), 2));
        routeList.get(currentRouteCount).busses.add(new Bus(props.getProperty("route2Vehicle3"), 3));
    	
         for(int i = 0; i < routeList.size(); i++) {
        	 for(int j=0; j < routeList.get(i).busses.size(); j++) {
        		 new Thread(new AccidentPublisher(routeList.get(i), routeList.get(i).busses.get(j))).start();
        	 }
         }
        
        // --- Run --- //
      //  publisherMain(domainId, sampleCount);
    }

    // -----------------------------------------------------------------------
    // Private Methods
    // -----------------------------------------------------------------------

    // --- Constructors: -----------------------------------------------------

    private AccidentPublisher(Route passedRoute, Bus passedBus) {
        super();
        this.pasedBus = passedBus;
        this.passedRoute = passedRoute;
    }

    // -----------------------------------------------------------------------

    private static void publisherMain(int domainId, int sampleCount, Route route, Bus bus) {

        DomainParticipant participant = null;
        Publisher publisher = null;
        Topic accidentTopic = null;
        Topic positionTopic = null;
        AccidentDataWriter accidentWriter = null;
        PositionDataWriter positionWriter = null;
        
        
        try {
            // --- Create participant --- //

            /* To customize participant QoS, use
            the configuration file
            USER_QOS_PROFILES.xml */

            participant = DomainParticipantFactory.TheParticipantFactory.
            create_participant(
                domainId, DomainParticipantFactory.PARTICIPANT_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (participant == null) {
                System.err.println("create_participant error\n");
                return;
            }        

            // --- Create publisher --- //

            /* To customize publisher QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            publisher = participant.create_publisher(
                DomainParticipant.PUBLISHER_QOS_DEFAULT, null /* listener */,
                StatusKind.STATUS_MASK_NONE);
            if (publisher == null) {
                System.err.println("create_publisher error\n");
                return;
            }                   

            // --- Create topic --- //

            /* Register type before creating topic */
            String accidentTypeName = AccidentTypeSupport.get_type_name();
            AccidentTypeSupport.register_type(participant, accidentTypeName);

            String positionTypeName = PositionTypeSupport.get_type_name();
            PositionTypeSupport.register_type(participant, positionTypeName);
            
            /* To customize topic QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            accidentTopic = participant.create_topic(
                "CPTS464 SBOGGAVA ACC",
                accidentTypeName, DomainParticipant.TOPIC_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (accidentTopic == null) {
                System.err.println("create_topic error\n");
                return;
            }           
            
            positionTopic = participant.create_topic(
            		"CPTS464 SBOGGAVA POS",
            		positionTypeName,
            		DomainParticipant.TOPIC_QOS_DEFAULT,
            		null,
            		StatusKind.STATUS_MASK_NONE);
            
            // --- Create writer --- //

            /* To customize data writer QoS, use
            the configuration file USER_QOS_PROFILES.xml */

            accidentWriter = (AccidentDataWriter)
            publisher.create_datawriter(
            		accidentTopic, Publisher.DATAWRITER_QOS_DEFAULT,
                null /* listener */, StatusKind.STATUS_MASK_NONE);
            if (accidentWriter == null) {
                System.err.println("create_datawriter ACCIDENT error\n");
                return;
            }
            
            positionWriter = (PositionDataWriter) publisher.create_datawriter(positionTopic,
            		Publisher.DATAWRITER_QOS_DEFAULT,
            		null,
            		StatusKind.STATUS_MASK_NONE);
            if(positionWriter == null) {
            	System.err.println("create_datawriter POSITION error\n");
            }
            

            // --- Write --- //
            /* Create data sample for writing */
            Accident accidentInstance = new Accident();
            Position positionInstance = new Position();
            
            InstanceHandle_t instance_handle = InstanceHandle_t.HANDLE_NIL;
            /* For a data type that has a key, if the same instance is going to be
            written multiple times, initialize the key here
            and register the keyed instance prior to writing */
            //instance_handle = writer.register_instance(instance);

            final long sendPeriodMillis = 2 * 1000; // 4 seconds
            /*
             * Accidents happen 10%
             * Heavy traffic 10%
             * Light traffic 25%
             * normal for 55%
             * */
            int passes = 0;
            for (int count = 0;
            (sampleCount == 0) || (count < sampleCount);
            ++count) {
             //   System.out.println("Writing Accident, count " + count);

                /* Modify the instance to be written here */
                
            	if(count % route.numStops == 0) passes++;
            	if(passes>3) break;
            	
                Conditions condition = new Conditions();
                
                String traffic = condition.getTrafficCondition().toString();
                
                if(traffic.contains("LIGHT")) {
                	positionInstance.trafficConditions = traffic;
                	positionInstance.timeBetweenStops = positionInstance.timeBetweenStops / 65;
                }
                if(traffic.contains("HEAVY")) {
                	positionInstance.trafficConditions = traffic;
                	positionInstance.timeBetweenStops = positionInstance.timeBetweenStops / 10;
                }
                if(traffic.contains("NORMAL")) {
                	positionInstance.trafficConditions = traffic;
                	positionInstance.timeBetweenStops = positionInstance.timeBetweenStops / 25;
                }
                Calendar calendar = Calendar.getInstance();
                SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss");
                String timestamp = formatter.format(calendar.getTime()).toString();
                accidentInstance.timestamp = timestamp;
                accidentInstance.route = route.name;
                accidentInstance.vehicle = bus.busName;
                accidentInstance.stopNumber = bus.stop;

                positionInstance.route = route.name;
                positionInstance.numStops = route.numStops;
                positionInstance.vehicle = bus.busName;
                positionInstance.stopNumber = bus.stop;
                positionInstance.fillInRatio = new Random().nextInt(100);
                positionInstance.timestamp = timestamp;
                
                if(condition.hasAccidentHappen()) {
                	System.out.println(bus.busName
                			+ " published an accident message at "
                			+ bus.stop +
                			" on route " + route.name + " at " + positionInstance.timestamp);
                    positionInstance.timeBetweenStops += 10;
                    System.out.println("Writing accident");
                    accidentWriter.write(accidentInstance, instance_handle); 
                }
               
                System.out.println(bus.busName + " published message at stop" + bus.stop + " on route "
                		+ route.name + " at " + formatter.format(calendar.getTime()));
                bus.stop = (bus.stop % route.numStops + 1);
                /* Write data */
                
                positionWriter.write_untyped(positionInstance, instance_handle);
                System.out.println("Writing Position for bus "+ positionInstance.vehicle);
                try {
                    Thread.sleep(sendPeriodMillis);
                } catch (InterruptedException ix) {
                    System.err.println("INTERRUPTED");
                    break;
                }
            }

            //writer.unregister_instance(instance, instance_handle);

        } finally {

            // --- Shutdown --- //

            if(participant != null) {
                participant.delete_contained_entities();

                DomainParticipantFactory.TheParticipantFactory.
                delete_participant(participant);
            }
            /* RTI Data Distribution Service provides finalize_instance()
            method for people who want to release memory used by the
            participant factory singleton. Uncomment the following block of
            code for clean destruction of the participant factory
            singleton. */
            //DomainParticipantFactory.finalize_instance();
        }
    }
    
    // for threads
    public void run() {
    	try {
    		System.out.println("Starting thread...");
    		publisherMain(this.domainId, this.sampleCount, this.passedRoute, this.pasedBus);
    		
    	} catch (Exception e) {
    		System.out.println("run() Error");
    	}
    }
}



